{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/vapi.sdk.ts"],"sourcesContent":["import Vapi from '@vapi-ai/web'\n\n// Type definitions for better type safety\nexport interface VapiVariableValues {\n  [key: string]: string | number | boolean;\n}\n\nexport interface VapiAssistantOverrides {\n  variableValues?: VapiVariableValues;\n  firstMessage?: string;\n  // Add other override properties as needed based on VAPI docs\n}\n\nexport interface VapiStartOptions {\n  assistantOverrides?: VapiAssistantOverrides;\n  // Add other start options as needed\n}\n\n// Create and export the Vapi instance\nexport const vapi = new Vapi(process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN!)\n\n// Export a function to get a fresh Vapi instance\nexport function getVapiInstance() {\n  return new Vapi(process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN!)\n}\n\n// Helper function to validate environment variables\nexport function validateVapiConfig() {\n  const webToken = process.env.NEXT_PUBLIC_VAPI_WEB_TOKEN;\n  const assistantId = process.env.NEXT_PUBLIC_VAPI_ASSISTANT_ID;\n  const generateAssistantId = process.env.NEXT_PUBLIC_VAPI_GENERATE_ASSISTANT_ID;\n  \n  if (!webToken) {\n    throw new Error('NEXT_PUBLIC_VAPI_WEB_TOKEN is required');\n  }\n  \n  if (!assistantId && !generateAssistantId) {\n    throw new Error('At least one of NEXT_PUBLIC_VAPI_ASSISTANT_ID or NEXT_PUBLIC_VAPI_GENERATE_ASSISTANT_ID is required');\n  }\n  \n  return {\n    webToken,\n    assistantId,\n    generateAssistantId\n  };\n}\n\n// Helper function to start a call with proper error handling\nexport async function startVapiCall(\n  assistantId: string, \n  overrides?: VapiAssistantOverrides\n): Promise<void> {\n  try {\n    console.log('Starting VAPI call:', { \n      assistantId, \n      overrides: JSON.stringify(overrides, null, 2) \n    });\n    \n    // Add tracing for debugging\n    console.log('VAPI SDK Connection Ready:', !!vapi);\n    \n    if (overrides) {\n      // Log each variable being passed for troubleshooting\n      if (overrides.variableValues) {\n        console.log('Variables being sent to assistant:');\n        Object.entries(overrides.variableValues).forEach(([key, value]) => {\n          console.log(`  - ${key}: ${typeof value === 'string' ? value : JSON.stringify(value)}`);\n        });\n      }\n      \n      // Start with assistant ID and overrides\n      await vapi.start(assistantId, overrides);\n    } else {\n      // Start with just assistant ID\n      await vapi.start(assistantId);\n    }\n    \n    console.log('VAPI call started successfully');\n  } catch (error) {\n    console.error('Failed to start VAPI call:', error);\n    console.error('Error details:', {\n      name: error instanceof Error ? error.name : 'Unknown',\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : 'No stack trace'\n    });\n    throw error;\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;;AAmBO,MAAM,OAAO,IAAI,mJAAA,CAAA,UAAI;AAGrB,SAAS;IACd,OAAO,IAAI,mJAAA,CAAA,UAAI;AACjB;AAGO,SAAS;IACd,MAAM;IACN,MAAM;IACN,MAAM;IAEN,uCAAe;;IAEf;IAEA,uCAA0C;;IAE1C;IAEA,OAAO;QACL;QACA;QACA;IACF;AACF;AAGO,eAAe,cACpB,WAAmB,EACnB,SAAkC;IAElC,IAAI;QACF,QAAQ,GAAG,CAAC,uBAAuB;YACjC;YACA,WAAW,KAAK,SAAS,CAAC,WAAW,MAAM;QAC7C;QAEA,4BAA4B;QAC5B,QAAQ,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAE5C,IAAI,WAAW;YACb,qDAAqD;YACrD,IAAI,UAAU,cAAc,EAAE;gBAC5B,QAAQ,GAAG,CAAC;gBACZ,OAAO,OAAO,CAAC,UAAU,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;oBAC5D,QAAQ,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,OAAO,UAAU,WAAW,QAAQ,KAAK,SAAS,CAAC,QAAQ;gBACxF;YACF;YAEA,wCAAwC;YACxC,MAAM,KAAK,KAAK,CAAC,aAAa;QAChC,OAAO;YACL,+BAA+B;YAC/B,MAAM,KAAK,KAAK,CAAC;QACnB;QAEA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,QAAQ,KAAK,CAAC,kBAAkB;YAC9B,MAAM,iBAAiB,QAAQ,MAAM,IAAI,GAAG;YAC5C,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;YACzD,OAAO,iBAAiB,QAAQ,MAAM,KAAK,GAAG;QAChD;QACA,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/services/vapiEncryptionService.ts"],"sourcesContent":["import { vapi } from '@/lib/vapi.sdk';\n// Note: voiceDataService and getCurrentUser imports moved to avoid client-side server imports\n\n/**\n * Service to integrate Vapi's voice calls with our encryption system\n * Client-side version for browser compatibility\n */\nexport const vapiEncryptionService = {\n  /**\n   * Start recording and encrypting a Vapi interview call\n   * \n   * @param interviewId The ID of the interview session\n   * @returns A cleanup function to stop recording\n   */\n  async startEncryptedRecording(interviewId: string): Promise<() => void> {\n    // This will hold audio chunks\n    const audioChunks: Blob[] = [];\n    let isRecording = true;\n    let recordingStream: MediaStream | null = null;\n    let mediaRecorder: MediaRecorder | null = null;\n    \n    try {\n      // Get current user via API call instead of direct import\n      const userResponse = await fetch('/api/user/current');\n      const userData = await userResponse.json();\n      \n      if (!userData.success || !userData.user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Check browser compatibility\n      if (!navigator.mediaDevices || !MediaRecorder) {\n        console.warn(\"Recording not supported in this browser\");\n        return () => {}; // Return empty cleanup function\n      }\n      \n      // Request microphone access\n      recordingStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      // Create MediaRecorder instance\n      mediaRecorder = new MediaRecorder(recordingStream);\n      \n      // Start recording\n      mediaRecorder.start();\n      \n      // Collect audio chunks\n      mediaRecorder.addEventListener('dataavailable', (event) => {\n        if (event.data.size > 0 && isRecording) {\n          audioChunks.push(event.data);\n        }\n      });\n\n      // Save recording when stopped\n      mediaRecorder.addEventListener('stop', async () => {\n        if (!isRecording || audioChunks.length === 0) return;\n        \n        try {\n          // Combine chunks into a single blob\n          const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });\n          \n          // Convert to buffer for encryption\n          const arrayBuffer = await audioBlob.arrayBuffer();\n          const audioBuffer = Buffer.from(arrayBuffer);\n          \n          // Create metadata\n          const metadata = {\n            duration: 0, // Would need to calculate actual duration\n            fileSize: audioBuffer.byteLength,\n            mimeType: 'audio/webm'\n          };\n          \n          // Store encrypted recording via API (try MongoDB first, fallback to Firebase)\n          const formData = new FormData();\n          formData.append('audio', audioBlob);\n          formData.append('interviewId', interviewId);\n          formData.append('metadata', JSON.stringify(metadata));\n          \n          // Try MongoDB endpoint first\n          let response = await fetch('/api/user/recordings-mongodb', {\n            method: 'POST',\n            body: formData\n          });\n          \n          if (!response.ok) {\n            console.log('MongoDB storage failed, trying Firebase fallback...');\n            // Fallback to Firebase endpoint\n            response = await fetch('/api/user/recordings', {\n              method: 'POST',\n              body: formData\n            });\n          }\n          \n          if (response.ok) {\n            const result = await response.json();\n            console.log(\"Interview recording encrypted and stored successfully:\", result);\n          } else {\n            const errorText = await response.text();\n            console.error(\"Failed to store recording:\", errorText);\n          }\n        } catch (error) {\n          console.error(\"Failed to encrypt and store interview recording:\", error);\n        }\n      });\n      \n      // Listen for Vapi call end to trigger saving\n      const handleCallEnd = () => {\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n          mediaRecorder.stop();\n        }\n      };\n      \n      vapi.on('call-end', handleCallEnd);\n      \n      // Return cleanup function\n      return () => {\n        isRecording = false;\n        \n        // Clean up Vapi event listener\n        vapi.off('call-end', handleCallEnd);\n        \n        // Stop recording\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n          mediaRecorder.stop();\n        }\n        \n        // Stop all tracks\n        if (recordingStream) {\n          recordingStream.getTracks().forEach(track => track.stop());\n        }\n      };\n    } catch (error) {\n      console.error(\"Error starting encrypted recording:\", error);\n      return () => {}; // Return empty cleanup function\n    }\n  },\n  \n  /**\n   * Retrieve and play back an encrypted recording\n   * \n   * @param recordingId The ID of the encrypted recording\n   * @returns A cleanup function to stop playback\n   */\n  async playEncryptedRecording(recordingId: string): Promise<() => void> {\n    try {\n      console.log(`[Vapi Encryption Service] Playing recording: ${recordingId}`);\n      \n      // Check authentication first\n      const authResponse = await fetch('/api/user/current');\n      const authData = await authResponse.json();\n      \n      if (!authData.success) {\n        throw new Error('Authentication required. Please sign in to play recordings.');\n      }\n      \n      // Try MongoDB endpoint first, fallback to Firebase\n      let response = await fetch(`/api/user/recordings-mongodb/${recordingId}`);\n      \n      if (!response.ok) {\n        console.log('MongoDB playback failed, trying Firebase fallback...');\n        response = await fetch(`/api/user/recordings/${recordingId}`);\n      }\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          throw new Error('Authentication required. Please sign in to play recordings.');\n        } else if (response.status === 404) {\n          throw new Error('Recording not found. It may have been deleted or expired.');\n        } else if (response.status === 403) {\n          throw new Error('Access denied. You can only play your own recordings.');\n        } else {\n          throw new Error(`Failed to fetch recording: ${response.status} ${response.statusText}`);\n        }\n      }\n      \n      // Get the audio data as blob\n      const audioBlob = await response.blob();\n      console.log(`[Vapi Encryption Service] Retrieved audio blob: ${audioBlob.size} bytes`);\n      \n      if (audioBlob.size === 0) {\n        throw new Error('Recording is empty or corrupted.');\n      }\n      \n      // Create object URL for audio playback\n      const audioUrl = URL.createObjectURL(audioBlob);\n      \n      // Create audio element\n      const audioElement = new Audio(audioUrl);\n      \n      // Add error handling for audio playback\n      audioElement.addEventListener('error', (e) => {\n        console.error('Audio playback error:', e);\n        URL.revokeObjectURL(audioUrl);\n      });\n      \n      // Start playback\n      await audioElement.play();\n      console.log(`[Vapi Encryption Service] Started playback for recording: ${recordingId}`);\n      \n      // Return cleanup function\n      return () => {\n        audioElement.pause();\n        audioElement.currentTime = 0;\n        URL.revokeObjectURL(audioUrl);\n        console.log(`[Vapi Encryption Service] Stopped playback for recording: ${recordingId}`);\n      };\n    } catch (error) {\n      console.error(\"Error playing encrypted recording:\", error);\n      throw error;\n    }\n  }\n};\n\nexport default vapiEncryptionService;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/utils/vapi-debug.ts"],"sourcesContent":["/**\n * Helper utility for debugging Vapi assistant interactions\n */\n\n/**\n * Send debug information about Vapi interactions to server-side logging\n */\nexport async function logVapiDebug(type: string, details: Record<string, unknown>) {\n  try {\n    // Don't log in production to avoid performance issues\n    if (process.env.NODE_ENV === 'production') return;\n    \n    console.log(`Logging Vapi debug (${type}):`, details);\n    \n    const response = await fetch('/api/vapi-debug', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        type,\n        details,\n      }),\n    });\n    \n    if (!response.ok) {\n      console.error('Failed to send Vapi debug log to server');\n    }\n  } catch (error) {\n    console.error('Error sending Vapi debug log:', error);\n  }\n}\n\n/**\n * Check if variables are being used in a response message\n */\nexport function checkVariableUsage(message: string, variables: Record<string, string | number | boolean | null | undefined>) {\n  const results: Record<string, boolean> = {};\n  \n  // Check each variable\n  Object.entries(variables).forEach(([key, value]) => {\n    if (typeof value === 'string' && value.trim()) {\n      results[key] = message.includes(value);\n    }\n  });\n  \n  return results;\n}\n"],"names":[],"mappings":"AAAA;;CAEC,GAED;;CAEC;;;;AACM,eAAe,aAAa,IAAY,EAAE,OAAgC;IAC/E,IAAI;QACF,sDAAsD;QACtD,uCAA2C;;QAAM;QAEjD,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,EAAE;QAE7C,MAAM,WAAW,MAAM,MAAM,mBAAmB;YAC9C,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;YACF;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC;QAChB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;IACjD;AACF;AAKO,SAAS,mBAAmB,OAAe,EAAE,SAAuE;IACzH,MAAM,UAAmC,CAAC;IAE1C,sBAAsB;IACtB,OAAO,OAAO,CAAC,WAAW,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;QAC7C,IAAI,OAAO,UAAU,YAAY,MAAM,IAAI,IAAI;YAC7C,OAAO,CAAC,IAAI,GAAG,QAAQ,QAAQ,CAAC;QAClC;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/components/Agent.tsx"],"sourcesContent":["\"use client\";\n\nimport Image from \"next/image\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { cn } from \"@/lib/utils\";\nimport { vapi } from \"@/lib/vapi.sdk\";\nimport vapiEncryptionService from \"@/lib/services/vapiEncryptionService\";\nimport { logVapiDebug, checkVariableUsage } from \"@/lib/utils/vapi-debug\";\nimport { v4 as uuidv4 } from 'uuid';\n\nenum CallStatus {\n    INACTIVE = 'INACTIVE',\n    CONNECTING = 'CONNECTING',\n    ACTIVE = 'ACTIVE',\n    FINISHED = 'FINISHED',\n}\n\ninterface SavedMessage {\n    role: 'user' | 'system' | 'assistant';\n    content: string;\n}\n\ninterface Message {\n    type: string;\n    transcriptType?: string;\n    role?: 'user' | 'system' | 'assistant';\n    transcript?: string;\n}\n\ninterface AgentProps {\n    userName?: string;\n    userId?: string;\n    interviewId?: string;\n    type: \"generate\" | \"interview\" | \"custom\"; // Add custom type\n    questions?: string[];\n    interviewRole?: string;\n    interviewLevel?: string;\n    company?: string;\n    jobTitle?: string; // <-- add this\n}\n\nconst Agent = ({\n    userId, \n    interviewId: propInterviewId, \n    type, \n    questions,\n    interviewRole,\n    interviewLevel,\n    company,\n    jobTitle // <-- add this\n}: AgentProps) => {\n    const router = useRouter();\n    const [callStatus, setCallStatus] = useState<CallStatus>(CallStatus.INACTIVE);\n    const [isSpeaking, setIsSpeaking] = useState(false);\n    const [userIsSpeaking, setUserIsSpeaking] = useState(false);\n    const [messages, setMessages] = useState<SavedMessage[]>([]);\n    const cleanupRecordingRef = useRef<(() => void) | null>(null);\n    const audioContextRef = useRef<AudioContext | null>(null);\n    const analyserRef = useRef<AnalyserNode | null>(null);\n    const microphoneStreamRef = useRef<MediaStream | null>(null);\n    const userSpeakingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n    \n    // Setup microphone activity monitoring to detect when user is speaking\n    const setupMicrophoneMonitoring = useCallback(async () => {\n        try {\n            // Clean up any existing audio processing\n            if (microphoneStreamRef.current) {\n                microphoneStreamRef.current.getTracks().forEach(track => track.stop());\n            }\n            if (audioContextRef.current) {\n                await audioContextRef.current.close();\n            }\n            if (userSpeakingTimeoutRef.current) {\n                clearTimeout(userSpeakingTimeoutRef.current);\n            }\n            \n            // Get microphone access\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            microphoneStreamRef.current = stream;\n            \n            // Set up audio analysis\n            const audioContext = new AudioContext();\n            audioContextRef.current = audioContext;\n            \n            const analyser = audioContext.createAnalyser();\n            analyser.fftSize = 256;\n            analyserRef.current = analyser;\n            \n            const microphone = audioContext.createMediaStreamSource(stream);\n            microphone.connect(analyser);\n            \n            const bufferLength = analyser.frequencyBinCount;\n            const dataArray = new Uint8Array(bufferLength);\n            \n            // Function to check audio levels\n            const checkAudioLevel = () => {\n                if (!analyserRef.current || callStatus !== CallStatus.ACTIVE) return;\n                \n                analyserRef.current.getByteFrequencyData(dataArray);\n                \n                // Calculate average volume\n                let sum = 0;\n                for (let i = 0; i < bufferLength; i++) {\n                    sum += dataArray[i];\n                }\n                const average = sum / bufferLength;\n                \n                // Threshold for speaking detection (adjust as needed)\n                const threshold = 10; // Lower threshold to make it more sensitive\n                \n                if (average > threshold) {\n                    // User is speaking - debug log to confirm detection\n                    console.log(\"User speaking detected, audio level:\", average);\n                    setUserIsSpeaking(true);\n                    \n                    // Clear any existing timeout\n                    if (userSpeakingTimeoutRef.current) {\n                        clearTimeout(userSpeakingTimeoutRef.current);\n                    }\n                    \n                    // Set a timeout to consider them done speaking if no audio is detected\n                    userSpeakingTimeoutRef.current = setTimeout(() => {\n                        setUserIsSpeaking(false);\n                        console.log(\"User speaking timeout - stopped speaking\");\n                    }, 500);\n                }\n                \n                // Continue monitoring\n                requestAnimationFrame(checkAudioLevel);\n            };\n            \n            // Start monitoring\n            console.log(\"Microphone monitoring started\");\n            requestAnimationFrame(checkAudioLevel); // Ensure we call this on animation frame\n            \n            return () => {\n                // Cleanup function\n                console.log(\"Cleaning up microphone monitoring\");\n                if (microphoneStreamRef.current) {\n                    microphoneStreamRef.current.getTracks().forEach(track => track.stop());\n                }\n                if (audioContextRef.current) {\n                    audioContextRef.current.close();\n                }\n                if (userSpeakingTimeoutRef.current) {\n                    clearTimeout(userSpeakingTimeoutRef.current);\n                }\n            };\n        } catch (error) {\n            console.error(\"Error setting up microphone monitoring:\", error);\n            return () => {};\n        }\n    }, [callStatus, setUserIsSpeaking]);\n    const [lastMessage, setLastMessage] = useState<string>('');\n    // Always have an interviewId for recording/analysis\n    const [interviewId] = useState<string>(\n        propInterviewId || (type === 'custom' ? `custom-${uuidv4()}` : '')\n    );\n\n    // Debug props for inspection\n    useEffect(() => {\n        console.log(\"Agent component initialized with props:\", { \n            userId, \n            interviewId, \n            type, \n            questions: questions?.length ? `${questions.length} questions` : 'none',\n            interviewRole,\n            interviewLevel,\n            company\n        });\n        \n        // Check if critical values are missing\n        if (type === 'interview') {\n            if (!interviewRole) console.warn(\"⚠️ Missing interviewRole prop - variables may not work in assistant\");\n            if (!interviewLevel) console.warn(\"⚠️ Missing interviewLevel prop - variables may not work in assistant\");\n            if (!company) console.warn(\"⚠️ Missing company prop - variables may not work in assistant\");\n        }\n    }, [userId, interviewId, type, questions, interviewRole, interviewLevel, company]);\n\n    useEffect(() => {\n        // Function to save completed interview\n        const saveCompletedInterview = async () => {\n            // Only save custom or regular interviews, not question generation\n            if (type !== 'custom' && type !== 'interview') return;\n            \n            try {\n                // Debug info before saving\n                console.log(`Saving interview with company: \"${company}\"`);\n                if (company?.toLowerCase() === 'meta') {\n                    console.log('Meta company detected - should use Facebook logo');\n                }\n                \n                // Prepare payload with care for Meta company name\n                const payload = {\n                    interviewId,\n                    role: jobTitle || interviewRole || 'Interview',\n                    type: type === 'custom' ? 'Custom' : 'Preset',\n                    company: company || 'Not specified',\n                    techstack: [], // Could be extracted from conversation in future\n                    level: interviewLevel || 'Not specified',\n                };\n                \n                console.log('Save interview payload:', payload);\n                \n                // Make the API call\n                const response = await fetch('/api/save-completed-interview', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(payload),\n                });\n                \n                const data = await response.json();\n                if (data.success) {\n                    console.log('Interview saved successfully:', data.interview);\n                } else {\n                    console.error('Failed to save interview:', data.error);\n                }\n            } catch (error) {\n                console.error('Error saving completed interview:', error);\n            }\n        };\n        \n        const handleCallStart = async () => {\n            console.log(\"🟢 Call started!\");\n            setCallStatus(CallStatus.ACTIVE);\n            \n            // Reset speaking states at start\n            setIsSpeaking(false);\n            setUserIsSpeaking(false);\n            \n            // Start encrypted recording if we have an interview ID\n            if (interviewId && userId) {\n                try {\n                    const cleanup = await vapiEncryptionService.startEncryptedRecording(interviewId);\n                    cleanupRecordingRef.current = cleanup;\n                    console.log(\"Encrypted recording started for interview:\", interviewId);\n                } catch (error) {\n                    console.error(\"Failed to start encrypted recording:\", error);\n                }\n            }\n            \n            // Start monitoring user's microphone for speech detection\n            console.log(\"Starting microphone monitoring...\");\n            try {\n                const micCleanup = await setupMicrophoneMonitoring();\n                const existingCleanup = cleanupRecordingRef.current;\n                if (existingCleanup) {\n                    cleanupRecordingRef.current = () => {\n                        existingCleanup();\n                        micCleanup();\n                    };\n                } else {\n                    cleanupRecordingRef.current = micCleanup;\n                }\n                console.log(\"Microphone monitoring setup complete\");\n            } catch (err) {\n                console.error(\"Error setting up microphone monitoring:\", err);\n            }\n        };\n        \n        const handleCallEnd = () => {\n            setCallStatus(CallStatus.FINISHED);\n            \n            // Reset speaking states\n            setIsSpeaking(false);\n            setUserIsSpeaking(false);\n            \n            // Stop encrypted recording and microphone monitoring\n            if (cleanupRecordingRef.current) {\n                cleanupRecordingRef.current();\n                cleanupRecordingRef.current = null;\n                console.log(\"Encrypted recording and monitoring stopped\");\n            }\n            \n            // Explicitly stop any microphone tracks\n            if (microphoneStreamRef.current) {\n                microphoneStreamRef.current.getTracks().forEach(track => track.stop());\n                microphoneStreamRef.current = null;\n            }\n            \n            // Clear any pending timeout\n            if (userSpeakingTimeoutRef.current) {\n                clearTimeout(userSpeakingTimeoutRef.current);\n                userSpeakingTimeoutRef.current = null;\n            }\n            \n            // Save completed interview information\n            if ((type === 'interview' || type === 'custom') && interviewId) {\n                saveCompletedInterview();\n                \n                // Redirect to analysis after a delay\n                setTimeout(() => {\n                    router.push(`/interview-analysis?id=${interviewId}`);\n                }, 2000);\n            }\n        };\n        \n        const handleMessage = (message: Message) => {\n            if (message.type === 'transcript' && message.transcriptType === 'final') {\n                if (message.role && message.transcript) {\n                    const newMessage = {\n                        role: message.role,\n                        content: message.transcript\n                    };\n                    \n                    // Check if first assistant message contains any of our variables\n                    // This helps us debug if variables are being used\n                    if (message.role === 'assistant' && messages.length === 0) {\n                        console.log(\"First assistant message:\", message.transcript);\n                        \n                        // Check which variables are being used in the response\n                        const variableUsage = checkVariableUsage(message.transcript, {\n                            interviewRole,\n                            role: interviewRole,\n                            jobTitle: interviewRole,\n                            company,\n                            interviewLevel,\n                            level: interviewLevel,\n                            experience: interviewLevel\n                        });\n                        \n                        console.log(\"Variable usage check:\", variableUsage);\n                        \n                        // Log the results for server-side analysis\n                        logVapiDebug('assistant-response-check', {\n                            firstMessage: message.transcript,\n                            variableUsage,\n                            originalVariables: {\n                                interviewRole,\n                                company,\n                                interviewLevel,\n                                questions: questions?.length || 0\n                            }\n                        });\n                        \n                        // Create user-friendly list of detected variables\n                        const variableCheck = [];\n                        \n                        if (interviewRole && message.transcript.includes(interviewRole)) \n                            variableCheck.push(\"✅ Contains interviewRole\");\n                        else if (interviewRole)\n                            variableCheck.push(\"❌ Missing interviewRole\");\n                            \n                        if (company && message.transcript.includes(company)) \n                            variableCheck.push(\"✅ Contains company\");\n                        else if (company)\n                            variableCheck.push(\"❌ Missing company\");\n                            \n                        if (interviewLevel && message.transcript.includes(interviewLevel)) \n                            variableCheck.push(\"✅ Contains interviewLevel\");\n                        else if (interviewLevel)\n                            variableCheck.push(\"❌ Missing interviewLevel\");\n                            \n                        console.log(\"Variable usage summary:\", variableCheck);\n                    }\n                    \n                    setMessages((prev) => [...prev, newMessage]);\n                    setLastMessage(message.transcript);\n                }\n            }\n        };\n\n        const handleSpeechStart = () => {\n            console.log(\"AI speech started\");\n            setIsSpeaking(true);\n        };\n        \n        const handleSpeechEnd = () => {\n            console.log(\"AI speech ended\");\n            setIsSpeaking(false);\n        };\n        \n        const handleError = (error: unknown) => {\n            console.error(\"Vapi error:\", error);\n            if (error instanceof Error) {\n                console.error(\"Vapi error details:\", {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack\n                });\n            }\n        };\n\n        // Add event listeners\n        vapi.on('call-start', handleCallStart);\n        vapi.on('call-end', handleCallEnd);\n        vapi.on('message', handleMessage);\n        vapi.on('speech-start', handleSpeechStart);\n        vapi.on('speech-end', handleSpeechEnd);\n        vapi.on('error', handleError);\n\n        // Cleanup function\n        return () => {\n            // Remove event listeners\n            vapi.off('call-start', handleCallStart);\n            vapi.off('call-end', handleCallEnd);\n            vapi.off('message', handleMessage);\n            vapi.off('speech-start', handleSpeechStart);\n            vapi.off('speech-end', handleSpeechEnd);\n            vapi.off('error', handleError);\n            \n            // Stop recording if active\n            if (cleanupRecordingRef.current) {\n                cleanupRecordingRef.current();\n                cleanupRecordingRef.current = null;\n            }\n        };\n    }, [interviewId, userId, type, router, company, interviewLevel, interviewRole, jobTitle, messages.length, questions?.length, setupMicrophoneMonitoring]);\n    \n    // Helper function to prepare variable values for VAPI\n    const prepareVariableValues = () => {\n        const variables: Record<string, string | number> = {};\n\n        // Add interview-specific variables\n        if (type === 'interview') {\n            // Match variable names with what's expected in the VAPI assistant\n            if (interviewRole) {\n                variables.interviewRole = interviewRole;\n                variables.role = interviewRole;           // Common variable name\n                variables.jobTitle = interviewRole;       // Alternate variable name\n                variables.position = interviewRole;       // Another possible name\n            }\n            if (interviewLevel) {\n                variables.interviewLevel = interviewLevel;\n                variables.level = interviewLevel;         // Common variable name\n                variables.experience = interviewLevel;    // Alternate variable name\n                variables.seniority = interviewLevel;     // Another possible name\n            }\n            if (company) {\n                variables.company = company;\n                variables.companyName = company;          // Alternate variable name\n            }\n            \n            // Format questions for the template with multiple format options\n            if (questions && questions.length > 0) {\n                variables.questionsText = questions.map((q, i) => `${i + 1}. ${q}`).join('\\n');\n                variables.questions = questions.join('\\n');   // Simple joined string\n                variables.totalQuestions = questions.length;\n                variables.interviewContext = `This is a ${interviewLevel || 'professional'} ${interviewRole || 'technical'} interview${company ? ` for ${company}` : ''}.`;\n            }\n        } else if (type === 'custom') {\n            if (jobTitle) {\n                variables.jobTitle = jobTitle;\n                variables.role = jobTitle;\n            }\n        }\n\n        // Add user info\n        if (userId) variables.userId = userId;\n        \n        // Add additional interview metadata\n        if (interviewId) variables.interviewId = interviewId;\n        variables.sessionType = type;\n\n        console.log(\"Prepared variable values:\", variables);\n        return variables;\n    };\n    \n    // Helper function to start a Vapi call with proper configuration\n    \n    // Helper function to start a Vapi call with proper configuration\n    const startVapiCall = async (): Promise<boolean> => {\n        const assistantId = type === 'interview' \n            ? process.env.NEXT_PUBLIC_VAPI_ASSISTANT_ID \n            : type === 'custom'\n                ? process.env.NEXT_PUBLIC_VAPI_GENERATE_ASSISTANT_ID_CUSTOM\n                : process.env.NEXT_PUBLIC_VAPI_GENERATE_ASSISTANT_ID;\n        \n        if (!assistantId) {\n            throw new Error(`Missing VAPI assistant ID for type: ${type}`);\n        }\n        \n        try {\n            const variableValues = prepareVariableValues();\n            console.log(\"Starting call with assistant ID:\", assistantId);\n            console.log(\"Variable values:\", JSON.stringify(variableValues, null, 2));\n            \n            // Log prepared variables for debugging\n            await logVapiDebug('variable-preparation', {\n                assistantId,\n                variableValues,\n                props: {\n                    userId,\n                    interviewId,\n                    type,\n                    questionsCount: questions?.length || 0,\n                    interviewRole,\n                    interviewLevel,\n                    company\n                }\n            });\n            \n            // According to VAPI docs, we can pass assistantOverrides as the second parameter\n            // to the start() method to override assistant settings and set template variables\n            const assistantOverrides = {\n                variableValues,\n                // Try to add first message with manually injected variables as fallback\n                firstMessage: type === 'interview' && interviewRole && company ? \n                    `Hello! I'll be conducting your ${interviewLevel || 'professional'} ${interviewRole} interview for ${company}. Let's get started.` : undefined\n            };\n\n            console.log(\"Starting VAPI call with overrides:\", JSON.stringify(assistantOverrides, null, 2));\n            \n            // Start the call with assistant ID and overrides\n            await vapi.start(assistantId, assistantOverrides);\n            \n            // For interview mode, prepare UI state\n            if (type === 'interview' && questions && questions.length > 0) {\n                setMessages([\n                    {\n                        role: 'system',\n                        content: `Interview initialized with ${questions.length} preset questions.`\n                    }\n                ]);\n                \n                setLastMessage(`Interview ready. The AI will conduct a structured interview using the preset questions.`);\n            }\n            \n            console.log(\"Vapi call started successfully\");\n            return true;\n        } catch (error) {\n            console.error(\"Failed to start Vapi call:\", error);\n            throw error;\n        }\n    };\n    \n    const handleStartCall = async () => {\n        if (callStatus === CallStatus.INACTIVE || callStatus === CallStatus.FINISHED) {\n            setCallStatus(CallStatus.CONNECTING);\n            \n            try {\n                await startVapiCall();\n                // Call will transition to ACTIVE via the handleCallStart callback when it connects\n            } catch (error) {\n                console.error(\"Failed to start call:\", error);\n                setCallStatus(CallStatus.INACTIVE);\n                \n                // Show user-friendly error message\n                setLastMessage(`Failed to start call: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        }\n    };\n    \n    const handleEndCall = async () => {\n        if (callStatus === CallStatus.ACTIVE) {\n            try {\n                // End Vapi call\n                await vapi.stop();\n                \n                // setCallStatus will be updated by the onCallEnd event handler\n                // This ensures our state reflects the actual call state from Vapi\n                \n                // Stop recording explicitly (also handled by call-end event, this is a safety measure)\n                if (cleanupRecordingRef.current) {\n                    cleanupRecordingRef.current();\n                    cleanupRecordingRef.current = null;\n                }\n            } catch (error) {\n                console.error(\"Failed to end call:\", error);\n                // Force status update even if the call end fails\n                setCallStatus(CallStatus.FINISHED);\n            }\n        }\n    };\n    \n\n    \n    // Check if we have preset questions to display\n    const hasPresetQuestions = questions && questions.length > 0;\n\n    return (\n        <>\n            <div className='call-view'>\n                <div className='card-interviewer hover-card'>\n                    <div className={`avatar ${isSpeaking ? 'speaking' : ''}`}>\n                        <Image \n                            src='/ai-avatar.png' \n                            alt='AI Interviewer' \n                            width={90} \n                            height={75} \n                            className='object-cover' \n                        />\n                        <span className='animate-speak'/>\n                    </div>\n                    <h3>AI Interviewer</h3>\n                    {type === 'interview' && company && (\n                        <p className='text-base text-gray-300 font-medium'>{company}</p>\n                    )}\n                    {/* Debug indicator */}\n                    {isSpeaking && <p className=\"text-xs text-green-400\">Speaking</p>}\n                </div>\n                <div className='card-border hover-card'>\n                    <div className='card-content'>\n                        <div className={`avatar ${userIsSpeaking ? 'speaking' : ''}`}>\n                            <Image \n                                src='/user-avatar.png' \n                                alt='user' \n                                width={540} \n                                height={540} \n                                className='rounded-full object-cover size-[160px]' \n                            />\n                            <span className='animate-speak'/>\n                        </div>\n                        <h3>Candidate</h3>\n                        {type === 'interview' && interviewRole && (\n                            <p className='text-base text-gray-300 font-medium'>\n                                {interviewLevel} {interviewRole}\n                            </p>\n                        )}\n                        {/* Debug indicator */}\n                        {userIsSpeaking && <p className=\"text-xs text-green-400\">Speaking</p>}\n                    </div>\n                </div>\n            </div>\n            \n            {/* Display preset questions if available */}\n            {hasPresetQuestions && (\n                <div className='mt-16 mb-8 p-6 bg-blue-900/20 rounded-xl border border-blue-600/30 shadow-inner'>\n                    <h4 className='text-lg font-medium mb-3 text-blue-200'>Interview Questions:</h4>\n                    <ol className='list-decimal ml-5 space-y-4'>\n                        {questions.map((question, index) => (\n                            <li key={index} className='text-sm text-blue-100 pb-2 border-b border-blue-700/30 last:border-0'>{question}</li>\n                        ))}\n                    </ol>\n                </div>\n            )}\n            \n            <div className='transcript-border'>\n                <div className='transcript min-h-16 text-base'>\n                    <p className={cn('transition-opacity duration-500', messages.length > 0 ? 'animate-fadeIn opacity-100' : 'text-gray-500')}>\n                        {messages.length > 0 ? lastMessage : 'Interview transcript will appear here...'}\n                    </p>\n                </div>\n            </div>\n            \n            <div className='w-full flex justify-center mt-6'>\n                {callStatus !== CallStatus.ACTIVE ? (\n                    <button \n                        className='relative btn-call text-lg px-8 py-4'\n                        onClick={handleStartCall}\n                        disabled={callStatus === CallStatus.CONNECTING}\n                    >\n                        <span className={cn(\n                            'absolute animate-ping rounded-full opacity-75', \n                            callStatus !== CallStatus.CONNECTING && 'hidden'\n                        )} />\n                        <span>\n                            {callStatus === CallStatus.INACTIVE || callStatus === CallStatus.FINISHED \n                                ? 'Start Interview' \n                                : 'Connecting...'}\n                        </span>\n                    </button>\n                ) : (\n                    <button \n                        className='btn-disconnect text-lg px-8 py-4'\n                        onClick={handleEndCall}\n                    >\n                        END INTERVIEW\n                    </button>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Agent;"],"names":[],"mappings":"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","debugId":null}}]
}