{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/actions/auth.actions.ts"],"sourcesContent":["'use server';\n\nimport { auth, db } from \"@/firebase/admin\";\nimport { cookies } from \"next/headers\";\n\n\n// Session duration (1 week)\nconst SESSION_DURATION = 60 * 60 * 24 * 7;\n\n// Set session cookie\nexport async function setSessionCookie(idToken: string) {\n  if (!auth) {\n    console.error(\"Error setting session cookie: Firebase Admin SDK not initialized.\");\n    return false;\n  }\n  try {\n    const cookieStore = await cookies();\n\n    console.log(\"Creating session cookie from idToken (first 10 chars):\", idToken.substring(0, 10) + \"...\");\n    \n    // Verify the ID token first\n    try {\n      const decodedToken = await auth.verifyIdToken(idToken);\n      console.log(\"ID token verified. User UID:\", decodedToken.uid);\n      console.log(\"ID token audience:\", decodedToken.aud);\n      console.log(\"ID token issuer:\", decodedToken.iss);\n    } catch (verifyError) {\n      console.error(\"Error verifying ID token:\", verifyError);\n      return false;\n    }\n    \n    // Create session cookie\n    const sessionCookie = await auth.createSessionCookie(idToken, {\n      expiresIn: SESSION_DURATION * 1000, // milliseconds\n    });\n\n    console.log(\"Session cookie created successfully\");\n\n    // Set cookie in the browser\n    cookieStore.set(\"session\", sessionCookie, {\n      maxAge: SESSION_DURATION,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      path: \"/\",\n      sameSite: \"lax\",\n    });\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error setting session cookie:\", error);\n    return false;\n  }\n}\n\nexport async function signUp(params: SignUpParams) {\n  const { uid, name, email, password } = params;\n\n  if (!db) {\n    console.error(\"Sign-up error: Firebase Admin SDK (Firestore) not initialized.\");\n    return {\n      success: false,\n      message: \"Server database error. Please try again later.\"\n    };\n  }\n\n  try {\n    // check if user exists in db\n    const userRecord = await db.collection(\"users\").doc(uid).get();\n    if (userRecord.exists)\n      return {\n        success: false,\n        message: \"User already exists. Please sign in.\",\n      };\n    // save user to db\n    await db.collection(\"users\").doc(uid).set({\n      name,\n      email,\n      // profileURL,\n      // resumeURL,\n    });\n\n    // Get the ID token to set session cookie\n    // Note: password is not needed here as auth is already handled by Firebase client\n    // but we keep it in the params to match the interface\n\n    return {\n      success: true,\n      message: \"Account created successfully. Please sign in.\",\n    };\n  } catch (error: any) {\n    console.error(\"Error creating user\", error);\n\n    // Handle Firebase specific errors\n    if (error.code === \"auth/email-already-exists\") {\n      return {\n        success: false,\n        message: \"This email is already in use\",\n      };\n    } else if (error.code === \"auth/invalid-email\") {\n      return {\n        success: false,\n        message: \"The email address is not valid\",\n      };\n    } else if (error.code === \"auth/operation-not-allowed\") {\n      return {\n        success: false,\n        message: \"Email/password accounts are not enabled\",\n      };\n    } else if (error.code === \"auth/uid-already-exists\") {\n      return {\n        success: false,\n        message: \"The provided user ID is already in use\",\n      };\n    }\n\n    return {\n      success: false,\n      message: \"Failed to create account. Please try again.\",\n    };\n  }\n}\n\nexport async function signIn(params: SignInParams) {\n  const { email, idToken } = params;\n\n  if (!auth) {\n    console.error(\"Sign-in error: Firebase Admin SDK not initialized.\");\n    return {\n      success: false,\n      message: \"Server authentication error. Please try again later.\"\n    };\n  }\n\n  try {\n    if (!idToken) {\n      console.error(\"Sign-in error: No ID token provided\");\n      return {\n        success: false,\n        message: \"Authentication failed. Please try again.\"\n      };\n    }\n\n    console.log(\"Verifying user email:\", email);\n    const userRecord = await auth.getUserByEmail(email);\n    if (!userRecord) {\n      console.error(\"Sign-in error: User not found for email:\", email);\n      return {\n        success: false,\n        message: \"User does not exist. Create an account.\",\n      };\n    }\n\n    // Clear any existing session cookies first\n    const cookieStore = await cookies();\n    cookieStore.delete(\"session\");\n    console.log(\"Cleared existing session cookies\");\n\n    console.log(\"Setting session cookie for user:\", userRecord.uid);\n    const cookieSet = await setSessionCookie(idToken);\n    \n    if (!cookieSet) {\n      console.error(\"Failed to set session cookie\");\n      return {\n        success: false,\n        message: \"Failed to create session. Please try again.\"\n      };\n    }\n    \n    console.log(\"Sign-in successful for user:\", userRecord.uid);\n    return {\n      success: true,\n      message: \"Signed in successfully.\"\n    };\n    \n  } catch (error: any) {\n    console.error(\"Sign-in error:\", error);\n    \n    // Handle specific Firebase auth error codes\n    if (error.code === \"auth/user-not-found\") {\n      return {\n        success: false,\n        message: \"User not found. Please create an account.\"\n      };\n    } else if (error.code === \"auth/invalid-credential\") {\n      return {\n        success: false,\n        message: \"Invalid credentials. Please try again.\"\n      };\n    } else if (error.code === \"auth/id-token-expired\") {\n      return {\n        success: false,\n        message: \"Your session has expired. Please sign in again.\"\n      };\n    } else if (error.code === \"auth/id-token-revoked\") {\n      return {\n        success: false,\n        message: \"Your session has been revoked. Please sign in again.\"\n      };\n    } else if (error.code === \"auth/invalid-id-token\") {\n      return {\n        success: false,\n        message: \"Invalid authentication token. Please try again.\"\n      };\n    }\n\n    return {\n      success: false,\n      message: \"Failed to log into account. Please try again.\",\n    };\n  }\n}\n\n// Sign out user by clearing the session cookie\nexport async function signOut() {\n  const cookieStore = await cookies();\n\n  cookieStore.delete(\"session\");\n}\n\n// Get current user from session cookie\nexport async function getCurrentUser(): Promise<User | null> {\n  if (!auth || !db) { // Added db check here\n    console.error(\"[getCurrentUser] Error: Firebase Admin SDK (Auth or Firestore) not initialized.\");\n    return null;\n  }\n  const cookieStore = await cookies();\n  const sessionCookie = cookieStore.get('session')?.value;\n\n  console.log(\"[getCurrentUser] Attempting to get session cookie. Value:\", sessionCookie ? \"Exists\" : \"Not Found\");\n\n  if (!sessionCookie) {\n    console.log(\"[getCurrentUser] No session cookie found.\");\n    return null;\n  }\n\n  try {\n    console.log(\"[getCurrentUser] Verifying session cookie...\");\n    // Get project ID safely\n    let projectId = \"unknown\";\n    try {\n      projectId = (auth as any).app.options?.projectId || \"unknown\";\n    } catch (e) {\n      console.log(\"[getCurrentUser] Could not access project ID:\", e);\n    }\n    console.log(\"[getCurrentUser] Auth project ID:\", projectId);\n    \n    try {\n      // First try to decode the session cookie without verification to see what's in it\n      const parts = sessionCookie.split('.');\n      if (parts.length === 3) {\n        const decoded = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n        console.log(\"[getCurrentUser] Session cookie audience:\", decoded.aud);\n        console.log(\"[getCurrentUser] Session cookie issuer:\", decoded.iss);\n      }\n    } catch (decodeError) {\n      console.log(\"[getCurrentUser] Could not decode session cookie:\", decodeError);\n    }\n    \n    const decodedClaims = await auth.verifySessionCookie(sessionCookie, true); // true checks for revocation\n    console.log(\"[getCurrentUser] Session cookie verified. UID:\", decodedClaims.uid);\n\n    // get user info from db\n    const userRecord = await db\n      .collection(\"users\")\n      .doc(decodedClaims.uid)\n      .get();\n\n    if (!userRecord.exists) {\n      console.log(\"[getCurrentUser] User not found in Firestore DB for UID:\", decodedClaims.uid);\n      return null;\n    }\n\n    console.log(\"[getCurrentUser] User found in Firestore DB. Email:\", userRecord.data()?.email);\n    return {\n      ...userRecord.data(),\n      id: userRecord.id,\n    } as User;\n  } catch (error) {\n    console.error(\"[getCurrentUser] Error verifying session cookie or fetching user:\", error instanceof Error ? error.message : String(error));\n    if (typeof error === 'object' && error !== null && 'code' in error) {\n      console.error(\"[getCurrentUser] Error code:\", (error as {code: string}).code);\n    }\n    // Invalid or expired session\n    return null;\n  }\n}\n\n// Check if user is authenticated\nexport async function isAuthenticated() {\n  console.log(\"[isAuthenticated] Checking authentication status...\");\n  const user = await getCurrentUser();\n  console.log(\"[isAuthenticated] User object:\", user ? `Exists (ID: ${user.id})` : \"null\");\n  return !!user;\n}"],"names":[],"mappings":";;;;;;IAqNsB,UAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/constants/index.ts"],"sourcesContent":["//import { CreateAssistantDTO } from \"@vapi-ai/web/dist/api\";\n//import { z } from \"zod\";\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\n/*export const interviewer: CreateAssistantDTO = {\n  name: \"Interviewer\",\n  firstMessage:\n    \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n  transcriber: {\n    provider: \"deepgram\",\n    model: \"nova-2\",\n    language: \"en\",\n  },\n  voice: {\n    provider: \"11labs\",\n    voiceId: \"sarah\",\n    stability: 0.4,\n    similarityBoost: 0.8,\n    speed: 0.9,\n    style: 0.5,\n    useSpeakerBoost: true,\n  },\n  model: {\n    provider: \"openai\",\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\n\nInterview Guidelines:\nFollow the structured question flow:\n{{questions}}\n\nEngage naturally & react appropriately:\nListen actively to responses and acknowledge them before moving forward.\nAsk brief follow-up questions if a response is vague or requires more detail.\nKeep the conversation flowing smoothly while maintaining control.\nBe professional, yet warm and welcoming:\n\nUse official yet friendly language.\nKeep responses concise and to the point (like in a real voice interview).\nAvoid robotic phrasing—sound natural and conversational.\nAnswer the candidate’s questions professionally:\n\nIf asked about the role, company, or expectations, provide a clear and relevant answer.\nIf unsure, redirect the candidate to HR for more details.\n\nConclude the interview properly:\nThank the candidate for their time.\nInform them that the company will reach out soon with feedback.\nEnd the conversation on a polite and positive note.\n\n\n- Be sure to be professional and polite.\n- Keep all your responses short and simple. Use official language, but be kind and welcoming.\n- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,\n      },\n    ],\n  },\n};\n\nexport const feedbackSchema = z.object({\n  totalScore: z.number(),\n  categoryScores: z.tuple([\n    z.object({\n      name: z.literal(\"Communication Skills\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Technical Knowledge\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Problem Solving\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Cultural Fit\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Confidence and Clarity\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n  ]),\n  strengths: z.array(z.string()),\n  areasForImprovement: z.array(z.string()),\n  finalAssessment: z.string(),\n});*/\n\nexport const interviewCovers = [\n  \"/adobe.png\",\n  \"/amazon.png\",\n  \"/facebook.png\",\n  \"/hostinger.png\",\n  \"/pinterest.png\",\n  \"/quora.png\",\n  \"/reddit.png\",\n  \"/skype.png\",\n  \"/spotify.png\",\n  \"/telegram.png\",\n  \"/tiktok.png\",\n  \"/yahoo.png\",\n];\n\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];\n"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,0BAA0B;;;;;;AAEnB,MAAM,WAAW;IACtB,YAAY;IACZ,SAAS;IACT,OAAO;IACP,WAAW;IACX,QAAQ;IACR,MAAM;IACN,UAAU;IACV,OAAO;IACP,KAAK;IACL,cAAc;IACd,WAAW;IACX,SAAS;IACT,WAAW;IACX,QAAQ;IACR,MAAM;IACN,SAAS;IACT,OAAO;IACP,UAAU;IACV,OAAO;IACP,YAAY;IACZ,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,YAAY;IACZ,KAAK;IACL,OAAO;IACP,KAAK;IACL,cAAc;IACd,QAAQ;IACR,WAAW;IACX,mBAAmB;IACnB,OAAO;IACP,MAAM;IACN,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,aAAa;IACb,UAAU;IACV,WAAW;IACX,QAAQ;IACR,YAAY;IACZ,IAAI;IACJ,YAAY;IACZ,IAAI;IACJ,cAAc;IACd,WAAW;IACX,SAAS;IACT,YAAY;IACZ,SAAS;IACT,OAAO;IACP,eAAe;IACf,YAAY;IACZ,UAAU;IACV,QAAQ;IACR,SAAS;IACT,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,OAAO;IACP,aAAa;IACb,UAAU;IACV,QAAQ;IACR,aAAa;IACb,UAAU;IACV,KAAK;IACL,MAAM;IACN,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,OAAO;IACP,QAAQ;IACR,OAAO;IACP,MAAM;IACN,OAAO;IACP,UAAU;IACV,SAAS;IACT,MAAM;IACN,OAAO;IACP,MAAM;IACN,OAAO;IACP,MAAM;IACN,WAAW;IACX,QAAQ;IACR,MAAM;IACN,QAAQ;IACR,WAAW;IACX,YAAY;IACZ,SAAS;IACT,QAAQ;IACR,eAAe;AACjB;AA8FO,MAAM,kBAAkB;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,kBAA+B;IAC1C;QACE,IAAI;QACJ,QAAQ;QACR,MAAM;QACN,MAAM;QACN,WAAW;YAAC;YAAS;YAAc;YAAW;SAAe;QAC7D,OAAO;QACP,WAAW;YAAC;SAAiB;QAC7B,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,QAAQ;QACR,MAAM;QACN,MAAM;QACN,WAAW;YAAC;YAAW;YAAW;YAAW;SAAQ;QACrD,OAAO;QACP,WAAW;YAAC;SAAmB;QAC/B,WAAW;QACX,WAAW;IACb;CACD","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/utils.ts"],"sourcesContent":["import { interviewCovers, mappings } from \"@/constants\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\n\nconst normalizeTechName = (tech: string) => {\n  const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n  return mappings[key as keyof typeof mappings];\n};\n\nconst checkIconExists = async (url: string) => {\n  try {\n    const response = await fetch(url, { method: \"HEAD\" });\n    return response.ok; // Returns true if the icon exists\n  } catch {\n    return false;\n  }\n};\n\nexport const getTechLogos = async (techArray: string[]) => {\n  const logoURLs = techArray.map((tech) => {\n    const normalized = normalizeTechName(tech);\n    return {\n      tech,\n      url: `${techIconBaseURL}/${normalized}/${normalized}-original.svg`,\n    };\n  });\n\n  const results = await Promise.all(\n    logoURLs.map(async ({ tech, url }) => ({\n      tech,\n      url: (await checkIconExists(url)) ? url : \"/tech.svg\",\n    }))\n  );\n\n  return results;\n};\n\nexport const getRandomInterviewCover = () => {\n  const randomIndex = Math.floor(Math.random() * interviewCovers.length);\n  return `/covers${interviewCovers[randomIndex]}`;\n};\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEA,MAAM,kBAAkB;AAExB,MAAM,oBAAoB,CAAC;IACzB,MAAM,MAAM,KAAK,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,QAAQ;IACpE,OAAO,kHAAA,CAAA,WAAQ,CAAC,IAA6B;AAC/C;AAEA,MAAM,kBAAkB,OAAO;IAC7B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;QAAO;QACnD,OAAO,SAAS,EAAE,EAAE,kCAAkC;IACxD,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,UAAU,GAAG,CAAC,CAAC;QAC9B,MAAM,aAAa,kBAAkB;QACrC,OAAO;YACL;YACA,KAAK,GAAG,gBAAgB,CAAC,EAAE,WAAW,CAAC,EAAE,WAAW,aAAa,CAAC;QACpE;IACF;IAEA,MAAM,UAAU,MAAM,QAAQ,GAAG,CAC/B,SAAS,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAK,CAAC;YACrC;YACA,KAAK,AAAC,MAAM,gBAAgB,OAAQ,MAAM;QAC5C,CAAC;IAGH,OAAO;AACT;AAEO,MAAM,0BAA0B;IACrC,MAAM,cAAc,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,kHAAA,CAAA,kBAAe,CAAC,MAAM;IACrE,OAAO,CAAC,OAAO,EAAE,kHAAA,CAAA,kBAAe,CAAC,YAAY,EAAE;AACjD","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/components/SignOutButton.tsx"],"sourcesContent":["'use client';\n\nimport { signOut } from '@/lib/actions/auth.actions';\nimport { useRouter } from 'next/navigation';\nimport { Button } from './ui/button';\n\nconst SignOutButton = () => {\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    await signOut();\n    router.push('/sign-in');\n  };\n\n  return (\n    <Button onClick={handleSignOut} variant=\"outline\">\n      Sign Out\n    </Button>\n  );\n};\n\nexport default SignOutButton;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMA,MAAM,gBAAgB;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,MAAM,gBAAgB;QACpB,MAAM,CAAA,GAAA,sJAAA,CAAA,UAAO,AAAD;QACZ,OAAO,IAAI,CAAC;IACd;IAEA,qBACE,8OAAC,2HAAA,CAAA,SAAM;QAAC,SAAS;QAAe,SAAQ;kBAAU;;;;;;AAItD;uCAEe","debugId":null}}]
}