{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/firebase/admin.ts"],"sourcesContent":["import admin from \"firebase-admin\";\nimport fs from 'fs';\nimport path from 'path';\n\nlet app: admin.app.App;\n\nif (!admin.apps.length) {\n  try {\n    // Check for different ways to configure Firebase Admin\n    let credential: admin.credential.Credential;\n    let storageBucket: string;\n\n    // Method 1: Use GOOGLE_APPLICATION_CREDENTIALS environment variable\n    if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {\n      console.log(`[Firebase Admin] Using service account from GOOGLE_APPLICATION_CREDENTIALS`);\n      \n      const serviceAccountPath = path.resolve(process.env.GOOGLE_APPLICATION_CREDENTIALS);\n      const serviceAccountContent = fs.readFileSync(serviceAccountPath, 'utf8');\n      const serviceAccount = JSON.parse(serviceAccountContent);\n      \n      credential = admin.credential.cert(serviceAccount);\n      // Try multiple bucket naming conventions\n      const possibleBuckets = [\n        process.env.FIREBASE_STORAGE_BUCKET,\n        `${serviceAccount.project_id}.appspot.com`,\n        `${serviceAccount.project_id}.firebasestorage.app`,\n        serviceAccount.project_id\n      ].filter(Boolean);\n      \n      storageBucket = possibleBuckets[0] as string;\n    }\n    // Method 2: Fallback to hardcoded service account file\n    else {\n      console.log(`[Firebase Admin] Using fallback service account file`);\n      const serviceAccountPath = path.join(process.cwd(), \"ai-interview-prep-36e64-firebase-adminsdk-fbsvc-1400160581.json\");\n      \n      const serviceAccountContent = fs.readFileSync(serviceAccountPath, 'utf8');\n      const serviceAccount = JSON.parse(serviceAccountContent);\n      \n      credential = admin.credential.cert(serviceAccount);\n      // Try multiple bucket naming conventions\n      const possibleBuckets = [\n        process.env.FIREBASE_STORAGE_BUCKET,\n        `${serviceAccount.project_id}.appspot.com`,\n        `${serviceAccount.project_id}.firebasestorage.app`,\n        serviceAccount.project_id\n      ].filter(Boolean);\n      \n      storageBucket = possibleBuckets[0] as string;\n    }\n\n    // Initialize the app\n    app = admin.initializeApp({\n      credential: credential,\n      storageBucket: storageBucket,\n      projectId: process.env.FIREBASE_PROJECT_ID || 'ai-interview-prep-36e64'\n    });\n    \n    console.log(`[Firebase Admin] SDK initialized successfully. Project: ${app.options.projectId}, Storage bucket: ${storageBucket}`);\n    \n    // Test the connection\n    try {\n      const bucket = app.storage().bucket();\n      console.log(`[Firebase Admin] Storage bucket confirmed: ${bucket.name}`);\n    } catch (bucketError) {\n      console.error(`[Firebase Admin] Storage bucket verification failed:`, bucketError);\n    }\n  } catch (error) {\n    console.error(\"[Firebase Admin] SDK initialization failed:\", error);\n    throw new Error(`Failed to initialize Firebase Admin SDK: ${(error as Error).message}`);\n  }\n} else {\n  app = admin.app();\n  console.log(\"[Firebase Admin] Using existing app instance.\");\n}\n\n// Export auth, firestore, and storage\nexport const auth = admin.auth(app);\nexport const db = admin.firestore(app);\nexport const storage = admin.storage(app);"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEA,IAAI;AAEJ,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,IAAI;QACF,uDAAuD;QACvD,IAAI;QACJ,IAAI;QAEJ,oEAAoE;QACpE,IAAI,QAAQ,GAAG,CAAC,8BAA8B,EAAE;YAC9C,QAAQ,GAAG,CAAC,CAAC,0EAA0E,CAAC;YAExF,MAAM,qBAAqB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,8BAA8B;YAClF,MAAM,wBAAwB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,oBAAoB;YAClE,MAAM,iBAAiB,KAAK,KAAK,CAAC;YAElC,aAAa,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;YACnC,yCAAyC;YACzC,MAAM,kBAAkB;gBACtB,QAAQ,GAAG,CAAC,uBAAuB;gBACnC,GAAG,eAAe,UAAU,CAAC,YAAY,CAAC;gBAC1C,GAAG,eAAe,UAAU,CAAC,oBAAoB,CAAC;gBAClD,eAAe,UAAU;aAC1B,CAAC,MAAM,CAAC;YAET,gBAAgB,eAAe,CAAC,EAAE;QACpC,OAEK;YACH,QAAQ,GAAG,CAAC,CAAC,oDAAoD,CAAC;YAClE,MAAM,qBAAqB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;YAEpD,MAAM,wBAAwB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,oBAAoB;YAClE,MAAM,iBAAiB,KAAK,KAAK,CAAC;YAElC,aAAa,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;YACnC,yCAAyC;YACzC,MAAM,kBAAkB;gBACtB,QAAQ,GAAG,CAAC,uBAAuB;gBACnC,GAAG,eAAe,UAAU,CAAC,YAAY,CAAC;gBAC1C,GAAG,eAAe,UAAU,CAAC,oBAAoB,CAAC;gBAClD,eAAe,UAAU;aAC1B,CAAC,MAAM,CAAC;YAET,gBAAgB,eAAe,CAAC,EAAE;QACpC;QAEA,qBAAqB;QACrB,MAAM,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YACxB,YAAY;YACZ,eAAe;YACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB,IAAI;QAChD;QAEA,QAAQ,GAAG,CAAC,CAAC,wDAAwD,EAAE,IAAI,OAAO,CAAC,SAAS,CAAC,kBAAkB,EAAE,eAAe;QAEhI,sBAAsB;QACtB,IAAI;YACF,MAAM,SAAS,IAAI,OAAO,GAAG,MAAM;YACnC,QAAQ,GAAG,CAAC,CAAC,2CAA2C,EAAE,OAAO,IAAI,EAAE;QACzE,EAAE,OAAO,aAAa;YACpB,QAAQ,KAAK,CAAC,CAAC,oDAAoD,CAAC,EAAE;QACxE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,MAAM,IAAI,MAAM,CAAC,yCAAyC,EAAE,AAAC,MAAgB,OAAO,EAAE;IACxF;AACF,OAAO;IACL,MAAM,2HAAA,CAAA,UAAK,CAAC,GAAG;IACf,QAAQ,GAAG,CAAC;AACd;AAGO,MAAM,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC;AACxB,MAAM,KAAK,2HAAA,CAAA,UAAK,CAAC,SAAS,CAAC;AAC3B,MAAM,UAAU,2HAAA,CAAA,UAAK,CAAC,OAAO,CAAC","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/actions/auth.actions.ts"],"sourcesContent":["'use server';\n\nimport { auth, db } from \"@/firebase/admin\";\nimport { cookies } from \"next/headers\";\n\n\n// Session duration (1 week)\nconst SESSION_DURATION = 60 * 60 * 24 * 7;\n\n// Set session cookie\nexport async function setSessionCookie(idToken: string) {\n  if (!auth) {\n    console.error(\"Error setting session cookie: Firebase Admin SDK not initialized.\");\n    return false;\n  }\n  try {\n    const cookieStore = await cookies();\n\n    console.log(\"Creating session cookie from idToken (first 10 chars):\", idToken.substring(0, 10) + \"...\");\n    \n    // Verify the ID token first\n    try {\n      const decodedToken = await auth.verifyIdToken(idToken);\n      console.log(\"ID token verified. User UID:\", decodedToken.uid);\n      console.log(\"ID token audience:\", decodedToken.aud);\n      console.log(\"ID token issuer:\", decodedToken.iss);\n    } catch (verifyError) {\n      console.error(\"Error verifying ID token:\", verifyError);\n      return false;\n    }\n    \n    // Create session cookie\n    const sessionCookie = await auth.createSessionCookie(idToken, {\n      expiresIn: SESSION_DURATION * 1000, // milliseconds\n    });\n\n    console.log(\"Session cookie created successfully\");\n\n    // Set cookie in the browser\n    cookieStore.set(\"session\", sessionCookie, {\n      maxAge: SESSION_DURATION,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      path: \"/\",\n      sameSite: \"lax\",\n    });\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error setting session cookie:\", error);\n    return false;\n  }\n}\n\nexport async function signUp(params: SignUpParams) {\n  const { uid, name, email, password } = params;\n\n  if (!db) {\n    console.error(\"Sign-up error: Firebase Admin SDK (Firestore) not initialized.\");\n    return {\n      success: false,\n      message: \"Server database error. Please try again later.\"\n    };\n  }\n\n  try {\n    // check if user exists in db\n    const userRecord = await db.collection(\"users\").doc(uid).get();\n    if (userRecord.exists)\n      return {\n        success: false,\n        message: \"User already exists. Please sign in.\",\n      };\n    // save user to db\n    await db.collection(\"users\").doc(uid).set({\n      name,\n      email,\n      // profileURL,\n      // resumeURL,\n    });\n\n    // Get the ID token to set session cookie\n    // Note: password is not needed here as auth is already handled by Firebase client\n    // but we keep it in the params to match the interface\n\n    return {\n      success: true,\n      message: \"Account created successfully. Please sign in.\",\n    };\n  } catch (error: any) {\n    console.error(\"Error creating user\", error);\n\n    // Handle Firebase specific errors\n    if (error.code === \"auth/email-already-exists\") {\n      return {\n        success: false,\n        message: \"This email is already in use\",\n      };\n    } else if (error.code === \"auth/invalid-email\") {\n      return {\n        success: false,\n        message: \"The email address is not valid\",\n      };\n    } else if (error.code === \"auth/operation-not-allowed\") {\n      return {\n        success: false,\n        message: \"Email/password accounts are not enabled\",\n      };\n    } else if (error.code === \"auth/uid-already-exists\") {\n      return {\n        success: false,\n        message: \"The provided user ID is already in use\",\n      };\n    }\n\n    return {\n      success: false,\n      message: \"Failed to create account. Please try again.\",\n    };\n  }\n}\n\nexport async function signIn(params: SignInParams) {\n  const { email, idToken } = params;\n\n  if (!auth) {\n    console.error(\"Sign-in error: Firebase Admin SDK not initialized.\");\n    return {\n      success: false,\n      message: \"Server authentication error. Please try again later.\"\n    };\n  }\n\n  try {\n    if (!idToken) {\n      console.error(\"Sign-in error: No ID token provided\");\n      return {\n        success: false,\n        message: \"Authentication failed. Please try again.\"\n      };\n    }\n\n    console.log(\"Verifying user email:\", email);\n    const userRecord = await auth.getUserByEmail(email);\n    if (!userRecord) {\n      console.error(\"Sign-in error: User not found for email:\", email);\n      return {\n        success: false,\n        message: \"User does not exist. Create an account.\",\n      };\n    }\n\n    // Clear any existing session cookies first\n    const cookieStore = await cookies();\n    cookieStore.delete(\"session\");\n    console.log(\"Cleared existing session cookies\");\n\n    console.log(\"Setting session cookie for user:\", userRecord.uid);\n    const cookieSet = await setSessionCookie(idToken);\n    \n    if (!cookieSet) {\n      console.error(\"Failed to set session cookie\");\n      return {\n        success: false,\n        message: \"Failed to create session. Please try again.\"\n      };\n    }\n    \n    console.log(\"Sign-in successful for user:\", userRecord.uid);\n    return {\n      success: true,\n      message: \"Signed in successfully.\"\n    };\n    \n  } catch (error: any) {\n    console.error(\"Sign-in error:\", error);\n    \n    // Handle specific Firebase auth error codes\n    if (error.code === \"auth/user-not-found\") {\n      return {\n        success: false,\n        message: \"User not found. Please create an account.\"\n      };\n    } else if (error.code === \"auth/invalid-credential\") {\n      return {\n        success: false,\n        message: \"Invalid credentials. Please try again.\"\n      };\n    } else if (error.code === \"auth/id-token-expired\") {\n      return {\n        success: false,\n        message: \"Your session has expired. Please sign in again.\"\n      };\n    } else if (error.code === \"auth/id-token-revoked\") {\n      return {\n        success: false,\n        message: \"Your session has been revoked. Please sign in again.\"\n      };\n    } else if (error.code === \"auth/invalid-id-token\") {\n      return {\n        success: false,\n        message: \"Invalid authentication token. Please try again.\"\n      };\n    }\n\n    return {\n      success: false,\n      message: \"Failed to log into account. Please try again.\",\n    };\n  }\n}\n\n// Sign out user by clearing the session cookie\nexport async function signOut() {\n  const cookieStore = await cookies();\n\n  cookieStore.delete(\"session\");\n}\n\n// Get current user from session cookie\nexport async function getCurrentUser(): Promise<User | null> {\n  if (!auth || !db) { // Added db check here\n    console.error(\"[getCurrentUser] Error: Firebase Admin SDK (Auth or Firestore) not initialized.\");\n    return null;\n  }\n  const cookieStore = await cookies();\n  const sessionCookie = cookieStore.get('session')?.value;\n\n  console.log(\"[getCurrentUser] Attempting to get session cookie. Value:\", sessionCookie ? \"Exists\" : \"Not Found\");\n\n  if (!sessionCookie) {\n    console.log(\"[getCurrentUser] No session cookie found.\");\n    return null;\n  }\n\n  try {\n    console.log(\"[getCurrentUser] Verifying session cookie...\");\n    // Get project ID safely\n    let projectId = \"unknown\";\n    try {\n      projectId = (auth as any).app.options?.projectId || \"unknown\";\n    } catch (e) {\n      console.log(\"[getCurrentUser] Could not access project ID:\", e);\n    }\n    console.log(\"[getCurrentUser] Auth project ID:\", projectId);\n    \n    try {\n      // First try to decode the session cookie without verification to see what's in it\n      const parts = sessionCookie.split('.');\n      if (parts.length === 3) {\n        const decoded = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n        console.log(\"[getCurrentUser] Session cookie audience:\", decoded.aud);\n        console.log(\"[getCurrentUser] Session cookie issuer:\", decoded.iss);\n      }\n    } catch (decodeError) {\n      console.log(\"[getCurrentUser] Could not decode session cookie:\", decodeError);\n    }\n    \n    const decodedClaims = await auth.verifySessionCookie(sessionCookie, true); // true checks for revocation\n    console.log(\"[getCurrentUser] Session cookie verified. UID:\", decodedClaims.uid);\n\n    // get user info from db\n    const userRecord = await db\n      .collection(\"users\")\n      .doc(decodedClaims.uid)\n      .get();\n\n    if (!userRecord.exists) {\n      console.log(\"[getCurrentUser] User not found in Firestore DB for UID:\", decodedClaims.uid);\n      return null;\n    }\n\n    console.log(\"[getCurrentUser] User found in Firestore DB. Email:\", userRecord.data()?.email);\n    return {\n      ...userRecord.data(),\n      id: userRecord.id,\n    } as User;\n  } catch (error) {\n    console.error(\"[getCurrentUser] Error verifying session cookie or fetching user:\", error instanceof Error ? error.message : String(error));\n    if (typeof error === 'object' && error !== null && 'code' in error) {\n      console.error(\"[getCurrentUser] Error code:\", (error as {code: string}).code);\n    }\n    // Invalid or expired session\n    return null;\n  }\n}\n\n// Check if user is authenticated\nexport async function isAuthenticated() {\n  console.log(\"[isAuthenticated] Checking authentication status...\");\n  const user = await getCurrentUser();\n  console.log(\"[isAuthenticated] User object:\", user ? `Exists (ID: ${user.id})` : \"null\");\n  return !!user;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 449, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/lib/utils/companyLogos.ts"],"sourcesContent":["// Map common company names to their logo paths\nconst companyLogoMap: Record<string, string> = {\n  // Tech companies\n  'meta': '/covers/facebook.png', \n  'facebook': '/covers/facebook.png',\n  'fb': '/covers/facebook.png',\n  \n  'google': '/covers/google.png',\n  'alphabet': '/covers/google.png',\n  \n  'microsoft': '/covers/microsoft.png',\n  'msft': '/covers/microsoft.png',\n  \n  'apple': '/covers/apple.png',\n  \n  'amazon': '/covers/amazon.png',\n  'aws': '/covers/amazon.png',\n  \n  'netflix': '/covers/netflix.png',\n  \n  'adobe': '/covers/adobe.png',\n  \n  'spotify': '/covers/spotify.png',\n  \n  'twitter': '/covers/twitter.png',\n  'x': '/covers/twitter.png',\n  \n  'reddit': '/covers/reddit.png',\n  \n  'tiktok': '/covers/tiktok.png',\n  'bytedance': '/covers/tiktok.png',\n  \n  'quora': '/covers/quora.png',\n  \n  'yahoo': '/covers/yahoo.png',\n  \n  'skype': '/covers/skype.png',\n  \n  'telegram': '/covers/telegram.png',\n  \n  'linkedin': '/covers/linkedin.png',\n  \n  'github': '/covers/github.png',\n  \n  'pinterest': '/covers/pinterest.png',\n  \n  'uber': '/covers/uber.png',\n  \n  'airbnb': '/covers/airbnb.png',\n  \n  'stripe': '/covers/stripe.png',\n  \n  'dropbox': '/covers/dropbox.png',\n  \n  // Default for unknown companies\n  'default': '/default-avatar.png'\n};\n\n/**\n * Get the logo path for a given company name\n * @param companyName The company name to find a logo for\n * @returns The path to the company logo\n */\nexport function getCompanyLogo(companyName: string): string {\n  if (!companyName) return companyLogoMap.default;\n  \n  // Normalize company name for matching\n  const normalizedCompany = companyName.trim().toLowerCase();\n  \n  // STEP 1: Exact match check - highest priority\n  if (companyLogoMap[normalizedCompany]) {\n    console.log(`[Logo] Exact match for \"${companyName}\": ${companyLogoMap[normalizedCompany]}`);\n    return companyLogoMap[normalizedCompany];\n  }\n  \n  // STEP 2: Special case for Meta/Facebook\n  if (normalizedCompany === 'meta' || normalizedCompany === 'meta platforms') {\n    console.log(`[Logo] Meta special case for \"${companyName}\": ${companyLogoMap['facebook']}`);\n    return companyLogoMap['facebook'];\n  }\n  \n  // STEP 3: Word boundary match - check if company name starts with a known company\n  // This prevents \"adobe metadata\" from matching with \"meta\"\n  const companyWords = normalizedCompany.split(/\\s+/);\n  for (const word of companyWords) {\n    if (companyLogoMap[word]) {\n      console.log(`[Logo] Word match for \"${companyName}\" -> \"${word}\": ${companyLogoMap[word]}`);\n      return companyLogoMap[word];\n    }\n  }\n  \n  // STEP 4: First-word match (often the most important part of company name)\n  if (companyWords.length > 0 && companyLogoMap[companyWords[0]]) {\n    console.log(`[Logo] First word match for \"${companyName}\" -> \"${companyWords[0]}\": ${companyLogoMap[companyWords[0]]}`);\n    return companyLogoMap[companyWords[0]];\n  }\n  \n  // STEP 5: Check for word prefix matches\n  // Sort by length in descending order to match the most specific company name first\n  const companies = Object.keys(companyLogoMap)\n    .filter(company => company !== 'default')\n    .sort((a, b) => b.length - a.length);\n  \n  for (const word of companyWords) {\n    for (const company of companies) {\n      // Check if a word starts with a company name (like \"google\" in \"googleplex\")\n      if (word.startsWith(company) && company.length > 2) { // only for substantial matches\n        console.log(`[Logo] Word prefix match for \"${companyName}\" -> \"${company}\": ${companyLogoMap[company]}`);\n        return companyLogoMap[company];\n      }\n    }\n  }\n  \n  // STEP 6: Substring match (lowest priority, most prone to false matches)\n  // Only check for substantial company names (length > 3) to avoid matching common short strings\n  for (const company of companies) {\n    if (company.length > 3 && normalizedCompany.includes(company)) {\n      console.log(`[Logo] Substring match for \"${companyName}\" -> \"${company}\": ${companyLogoMap[company]}`);\n      return companyLogoMap[company];\n    }\n  }\n  \n  // If no match found, return default\n  console.log(`[Logo] No match for \"${companyName}\", using default`);\n  return companyLogoMap.default;\n}\n"],"names":[],"mappings":"AAAA,+CAA+C;;;;AAC/C,MAAM,iBAAyC;IAC7C,iBAAiB;IACjB,QAAQ;IACR,YAAY;IACZ,MAAM;IAEN,UAAU;IACV,YAAY;IAEZ,aAAa;IACb,QAAQ;IAER,SAAS;IAET,UAAU;IACV,OAAO;IAEP,WAAW;IAEX,SAAS;IAET,WAAW;IAEX,WAAW;IACX,KAAK;IAEL,UAAU;IAEV,UAAU;IACV,aAAa;IAEb,SAAS;IAET,SAAS;IAET,SAAS;IAET,YAAY;IAEZ,YAAY;IAEZ,UAAU;IAEV,aAAa;IAEb,QAAQ;IAER,UAAU;IAEV,UAAU;IAEV,WAAW;IAEX,gCAAgC;IAChC,WAAW;AACb;AAOO,SAAS,eAAe,WAAmB;IAChD,IAAI,CAAC,aAAa,OAAO,eAAe,OAAO;IAE/C,sCAAsC;IACtC,MAAM,oBAAoB,YAAY,IAAI,GAAG,WAAW;IAExD,+CAA+C;IAC/C,IAAI,cAAc,CAAC,kBAAkB,EAAE;QACrC,QAAQ,GAAG,CAAC,CAAC,wBAAwB,EAAE,YAAY,GAAG,EAAE,cAAc,CAAC,kBAAkB,EAAE;QAC3F,OAAO,cAAc,CAAC,kBAAkB;IAC1C;IAEA,yCAAyC;IACzC,IAAI,sBAAsB,UAAU,sBAAsB,kBAAkB;QAC1E,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,YAAY,GAAG,EAAE,cAAc,CAAC,WAAW,EAAE;QAC1F,OAAO,cAAc,CAAC,WAAW;IACnC;IAEA,kFAAkF;IAClF,2DAA2D;IAC3D,MAAM,eAAe,kBAAkB,KAAK,CAAC;IAC7C,KAAK,MAAM,QAAQ,aAAc;QAC/B,IAAI,cAAc,CAAC,KAAK,EAAE;YACxB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,YAAY,MAAM,EAAE,KAAK,GAAG,EAAE,cAAc,CAAC,KAAK,EAAE;YAC1F,OAAO,cAAc,CAAC,KAAK;QAC7B;IACF;IAEA,2EAA2E;IAC3E,IAAI,aAAa,MAAM,GAAG,KAAK,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;QAC9D,QAAQ,GAAG,CAAC,CAAC,6BAA6B,EAAE,YAAY,MAAM,EAAE,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;QACtH,OAAO,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC;IACxC;IAEA,wCAAwC;IACxC,mFAAmF;IACnF,MAAM,YAAY,OAAO,IAAI,CAAC,gBAC3B,MAAM,CAAC,CAAA,UAAW,YAAY,WAC9B,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,MAAM,GAAG,EAAE,MAAM;IAErC,KAAK,MAAM,QAAQ,aAAc;QAC/B,KAAK,MAAM,WAAW,UAAW;YAC/B,6EAA6E;YAC7E,IAAI,KAAK,UAAU,CAAC,YAAY,QAAQ,MAAM,GAAG,GAAG;gBAClD,QAAQ,GAAG,CAAC,CAAC,8BAA8B,EAAE,YAAY,MAAM,EAAE,QAAQ,GAAG,EAAE,cAAc,CAAC,QAAQ,EAAE;gBACvG,OAAO,cAAc,CAAC,QAAQ;YAChC;QACF;IACF;IAEA,yEAAyE;IACzE,+FAA+F;IAC/F,KAAK,MAAM,WAAW,UAAW;QAC/B,IAAI,QAAQ,MAAM,GAAG,KAAK,kBAAkB,QAAQ,CAAC,UAAU;YAC7D,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,YAAY,MAAM,EAAE,QAAQ,GAAG,EAAE,cAAc,CAAC,QAAQ,EAAE;YACrG,OAAO,cAAc,CAAC,QAAQ;QAChC;IACF;IAEA,oCAAoC;IACpC,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,YAAY,gBAAgB,CAAC;IACjE,OAAO,eAAe,OAAO;AAC/B","debugId":null}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file:///Users/shazlimekrani/Desktop/project/spur_v7/AI-Interview-Prep-Platform-PrepWise/app/api/save-completed-interview/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { MongoClient } from 'mongodb';\nimport { getCurrentUser } from '@/lib/actions/auth.actions';\nimport { getCompanyLogo } from '@/lib/utils/companyLogos';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser();\n    \n    if (!user) {\n      return NextResponse.json({ success: false, error: 'Not authenticated' }, { status: 401 });\n    }\n    \n    const data = await request.json();\n    const { \n      interviewId, \n      role, \n      type = 'custom',\n      company = 'Not specified', \n      techstack = [], \n      level = 'Not specified' \n    } = data;\n    \n    if (!interviewId || !role) {\n      return NextResponse.json(\n        { success: false, error: 'Missing required fields' }, \n        { status: 400 }\n      );\n    }\n\n    // Connect to DB\n    const client = new MongoClient(process.env.MONGODB_URI!);\n    await client.connect();\n    const db = client.db('prepwise');\n    \n    // Create a completed interview record\n    let companyLogo;\n    \n    // Special case for Meta to ensure we always use the facebook logo\n    if (company.trim().toLowerCase() === 'meta') {\n      companyLogo = '/covers/facebook.png';\n      console.log(`Meta special case detected: forcing Facebook logo`);\n    } else {\n      companyLogo = getCompanyLogo(company);\n    }\n    \n    console.log(`Company: ${company}, Selected logo: ${companyLogo}`);\n    \n    const completedInterview = {\n      id: interviewId,\n      userId: user.id,\n      role,\n      type,\n      company,\n      techstack,\n      level,\n      finalized: true,\n      createdAt: new Date().toISOString(),\n      companyLogo, // Get correct logo for company\n      description: `${type} interview for a ${level} ${role} position at ${company}`\n    };\n    \n    // Save to database\n    await db.collection('completed_interviews').insertOne(completedInterview);\n    \n    // Close connection\n    await client.close();\n    \n    return NextResponse.json({ \n      success: true, \n      interview: completedInterview \n    });\n  } catch (error) {\n    console.error('Error saving completed interview:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to save interview' }, \n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD;QAEhC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAO,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,WAAW,EACX,IAAI,EACJ,OAAO,QAAQ,EACf,UAAU,eAAe,EACzB,YAAY,EAAE,EACd,QAAQ,eAAe,EACxB,GAAG;QAEJ,IAAI,CAAC,eAAe,CAAC,MAAM;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA0B,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,QAAQ,GAAG,CAAC,WAAW;QACtD,MAAM,OAAO,OAAO;QACpB,MAAM,KAAK,OAAO,EAAE,CAAC;QAErB,sCAAsC;QACtC,IAAI;QAEJ,kEAAkE;QAClE,IAAI,QAAQ,IAAI,GAAG,WAAW,OAAO,QAAQ;YAC3C,cAAc;YACd,QAAQ,GAAG,CAAC,CAAC,iDAAiD,CAAC;QACjE,OAAO;YACL,cAAc,CAAA,GAAA,8HAAA,CAAA,iBAAc,AAAD,EAAE;QAC/B;QAEA,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,QAAQ,iBAAiB,EAAE,aAAa;QAEhE,MAAM,qBAAqB;YACzB,IAAI;YACJ,QAAQ,KAAK,EAAE;YACf;YACA;YACA;YACA;YACA;YACA,WAAW;YACX,WAAW,IAAI,OAAO,WAAW;YACjC;YACA,aAAa,GAAG,KAAK,iBAAiB,EAAE,MAAM,CAAC,EAAE,KAAK,aAAa,EAAE,SAAS;QAChF;QAEA,mBAAmB;QACnB,MAAM,GAAG,UAAU,CAAC,wBAAwB,SAAS,CAAC;QAEtD,mBAAmB;QACnB,MAAM,OAAO,KAAK;QAElB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,WAAW;QACb;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA2B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}